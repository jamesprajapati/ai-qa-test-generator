class CSVExporter {
  generateXrayCSV(testCases) {
    const headers = [
      'Test Key',
      'Test Summary',
      'Test Type',
      'Test Priority',
      'Component',
      'Labels',
      'Test Repository Path',
      'Precondition',
      'Test Script (Step-by-Step)',
      'Expected Result',
      'Test Data',
      'Test Environment',
      'Test Execution Type',
      'Status'
    ];

    let csvContent = this.escapeCSVRow(headers).join(',') + '\n';

    testCases.forEach((testCase, index) => {
      const row = [
        testCase.id || `TC-${String(index + 1).padStart(4, '0')}`,
        testCase.summary || 'Test case summary',
        'Manual',
        testCase.priority || 'Medium',
        testCase.category || 'General',
        `manual,ai-generated,${testCase.type?.toLowerCase() || 'functional'}`,
        `/${testCase.category?.replace(/\s+/g, '_') || 'General'}/${testCase.type?.replace(/\s+/g, '_') || 'Functional'}`,
        testCase.preconditions || 'System is ready',
        this.formatTestSteps(testCase.steps),
        testCase.expectedResult || 'Expected behavior occurs',
        '',
        'Test Environment',
        'Manual',
        'Draft'
      ];
      
      csvContent += this.escapeCSVRow(row).join(',') + '\n';
    });

    return csvContent;
  }

  generateSimpleCSV(testCases) {
    const headers = [
      'ID', 'Summary', 'Priority', 'Type', 'Category',
      'Preconditions', 'Steps', 'Expected Result', 'Labels'
    ];

    let csvContent = this.escapeCSVRow(headers).join(',') + '\n';

    testCases.forEach(testCase => {
      const row = [
        testCase.id,
        testCase.summary,
        testCase.priority,
        testCase.type,
        testCase.category,
        testCase.preconditions,
        testCase.steps.replace(/\n/g, '\\n'),
        testCase.expectedResult,
        'manual,ai-generated'
      ];
      csvContent += this.escapeCSVRow(row).join(',') + '\n';
    });

    return csvContent;
  }

  generateTestRailCSV(testCases) {
    const headers = [
      'ID', 'Title', 'Section', 'Template', 'Type', 'Priority',
      'Estimate', 'References', 'Automation Type', 'Preconditions',
      'Steps', 'Expected Result'
    ];

    let csvContent = this.escapeCSVRow(headers).join(',') + '\n';

    testCases.forEach(testCase => {
      const row = [
        testCase.id,
        testCase.summary,
        testCase.category,
        'Test Case (Steps)',
        testCase.type,
        this.mapPriorityToTestRail(testCase.priority),
        '30m',
        '',
        'None',
        testCase.preconditions,
        testCase.steps.replace(/\n/g, '\\n'),
        testCase.expectedResult
      ];
      
      csvContent += this.escapeCSVRow(row).join(',') + '\n';
    });

    return csvContent;
  }

  generateAzureDevOpsCSV(testCases) {
    const headers = [
      'ID', 'Work Item Type', 'Title', 'Description', 'State', 'Priority',
      'Area Path', 'Iteration Path', 'Tags', 'Test Steps', 'Expected Result'
    ];

    let csvContent = this.escapeCSVRow(headers).join(',') + '\n';

    testCases.forEach(testCase => {
      const row = [
        testCase.id,
        'Test Case',
        testCase.summary,
        `${testCase.preconditions}\n\n${testCase.steps}`,
        'Design',
        this.mapPriorityToAzure(testCase.priority),
        testCase.category,
        'Sprint 1',
        `manual; ai-generated; ${testCase.type.toLowerCase()}`,
        testCase.steps.replace(/\n/g, '\\n'),
        testCase.expectedResult
      ];
      
      csvContent += this.escapeCSVRow(row).join(',') + '\n';
    });

    return csvContent;
  }

  generateExportPackage(testCases, featureName) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const baseFilename = `${featureName.replace(/\s+/g, '_')}_${timestamp}`;

    return {
      xray: {
        filename: `${baseFilename}_xray.csv`,
        content: this.generateXrayCSV(testCases),
        description: 'Xray Test Management compatible format'
      },
      simple: {
        filename: `${baseFilename}_simple.csv`,
        content: this.generateSimpleCSV(testCases),
        description: 'Simple CSV format for basic imports'
      },
      testrail: {
        filename: `${baseFilename}_testrail.csv`,
        content: this.generateTestRailCSV(testCases),
        description: 'TestRail compatible format'
      },
      azure: {
        filename: `${baseFilename}_azure.csv`,
        content: this.generateAzureDevOpsCSV(testCases),
        description: 'Azure DevOps compatible format'
      },
      json: {
        filename: `${baseFilename}_data.json`,
        content: JSON.stringify(testCases, null, 2),
        description: 'JSON format for custom integrations'
      },
      summary: {
        filename: `${baseFilename}_summary.txt`,
        content: this.generateSummaryReport(testCases, featureName),
        description: 'Human-readable test summary report'
      }
    };
  }

  formatTestSteps(steps) {
    if (!steps) return '';
    
    return steps.split('\n')
      .filter(step => step.trim())
      .map((step, index) => {
        const cleanStep = step.replace(/^\d+\.\s*/, '').trim();
        return `${index + 1}. ${cleanStep}`;
      })
      .join('\\n');
  }

  mapPriorityToTestRail(priority) {
    const mapping = {
      'High': '1 - Don\'t Test',
      'Medium': '2 - Medium',
      'Low': '3 - High'
    };
    return mapping[priority] || '2 - Medium';
  }

  mapPriorityToAzure(priority) {
    const mapping = {
      'High': '1',
      'Medium': '2',
      'Low': '3'
    };
    return mapping[priority] || '2';
  }

  escapeCSVRow(row) {
    return row.map(field => {
      if (field === null || field === undefined) return '""';
      const str = String(field);
      if (str.includes('"') || str.includes(',') || str.includes('\n')) {
        return `"${str.replace(/"/g, '""')}"`;
      }
      return `"${str}"`;
    });
  }

  generateSummaryReport(testCases, featureName) {
    const totalCases = testCases.length;
    const byType = {};
    const byPriority = {};

    testCases.forEach(tc => {
      byType[tc.type] = (byType[tc.type] || 0) + 1;
      byPriority[tc.priority] = (byPriority[tc.priority] || 0) + 1;
    });

    return `TEST CASE SUMMARY REPORT
========================

Feature: ${featureName}
Generated: ${new Date().toLocaleDateString()}
Total Test Cases: ${totalCases}

BREAKDOWN BY TYPE:
${Object.entries(byType).map(([type, count]) => `- ${type}: ${count}`).join('\n')}

BREAKDOWN BY PRIORITY:
${Object.entries(byPriority).map(([priority, count]) => `- ${priority}: ${count}`).join('\n')}

IMPORT INSTRUCTIONS:
===================

XRAY:
1. Go to Test Repository in Jira
2. Click "Import" > "Import Test Cases from CSV"
3. Upload the *_xray.csv file
4. Map columns and import

Generated by AI QA Test Case Generator
`;
  }

  generateCSV(testCases) {
    return this.generateXrayCSV(testCases);
  }
}

module.exports = new CSVExporter();
